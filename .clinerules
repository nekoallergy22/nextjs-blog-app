# .clinerules

## ロール定義

あなたは熟練のNext.js開発者としてコードを書いてください。

## 期待する回答

- 実装コードは省略せず、完全な形で提供
- 日本語での詳細な説明
- 必要に応じてコンポーネント設計の説明

## 技術スタック

- Next.js 15.2.3 (App Router)
- TypeScript
- Tailwind CSS
- Heroicons
- Docker / Docker Compose
- Node.js / npm

## 注意事項

### 設計書

- 新規開発時は docs ディレクトリ以下に以下の内容を含む設計書 `design.md`を作成してください：
  - 要件定義書
  - 設計書（概略・機能・コンポーネント構成）
  - データフロー図
- 既存のアプリケーションを修正する場合：
  - 既存の設計書を参照して開発してください
  - 修正内容に応じて設計書も更新してください
- 設計書を作成したら、コードを作成する前にユーザーに設計書のチェックを依頼してください

### コーディング規約

#### 全般
- TypeScriptの型定義を厳密に行ってください（any型の使用は避ける）
- ESLintとPrettierの設定に従ったコードを書いてください
- ファイル名は次のルールに従ってください：
  - コンポーネント: PascalCase (例: `UserProfile.tsx`)
  - ユーティリティ/ヘルパー: camelCase (例: `formatDate.ts`)
  - 定数/型定義: camelCase (例: `types.ts`, `constants.ts`)

#### Next.js固有
- App Routerの機能を最大限に活用してください
- Server ComponentとClient Componentを適切に使い分けてください
- メタデータは適切に設定してください
- 画像最適化にはNext.jsの`Image`コンポーネントを使用してください
- APIルートはRoute Handlersを使用して実装してください

#### コンポーネント設計
- アトミックデザインの原則に従ってコンポーネントを設計してください
- コンポーネントは単一責任の原則に従って設計してください
- 再利用可能なコンポーネントは`components/ui`ディレクトリに配置してください
- ページ固有のコンポーネントは対応するページディレクトリ内に配置してください

#### Tailwind CSS
- ユーティリティクラスを直接使用してください
- 複雑なスタイルは`@apply`ディレクティブを使用してコンポーネント内で定義してください
- 共通のスタイルはTailwindのテーマ設定で定義してください
- レスポンシブデザインはTailwindのブレークポイント修飾子を使用してください

### テスト

- テストコードは`__tests__`ディレクトリに配置してください
- コンポーネントテストにはJestとReact Testing Libraryを使用してください
- E2Eテストが必要な場合はPlaywrightを使用してください
- テストカバレッジは最低70%を目指してください

### Docker関連

- 開発環境と本番環境で別のDockerfileを用意してください
- 環境変数は`.env.example`ファイルで例を示し、実際の値は`.env.local`で管理してください
- Docker Composeを使用して開発環境を構築してください
- ボリュームマウントを適切に設定して開発効率を高めてください

### Git操作

- gitの操作はgit statusでステータス確認しながら慎重に行ってください
- git管理されているファイルは、git mv や git rm を使って移動削除してください
- コミットメッセージは[Conventional Commits](https://www.conventionalcommits.org/)の形式に従ってください

### Pull Request(PR)

#### PR作成時
- PRを要望されたら、gitコマンドで差分を確認したうえで、`gh pr` コマンドを使ってPRを作成してください
- PRのdescriptionは .github/pull_request_template.md を読み取ってフォーマットを合わせてください

#### PRレビュー時
以下の手順でファイルごとにコメントを付けてください：

1. チェックする観点は .github/pull_request_template.md を参照してください
2. PRの差分を確認:
   ```bash
   gh pr diff 
   ```

3. ファイルごとに、変更後のファイル全体とPRの差分を確認した上でレビューコメントを追加:
   ```bash
   gh api repos///pulls//comments \
     -F body="レビューコメント" \
     -F commit_id="$(gh pr view  --json headRefOid --jq .headRefOid)" \
     -F path="対象ファイルのパス" \
     -F position=
   ```

### パフォーマンス最適化

- 画像の最適化にはNext.jsの`Image`コンポーネントを使用してください
- コンポーネントの不必要な再レンダリングを避けるためにメモ化を適切に使用してください
- 大きなデータセットを扱う場合は仮想化ライブラリを検討してください
- Server ComponentとClient Componentを適切に使い分けてバンドルサイズを最適化してください
- 必要に応じてコード分割を行ってください

### アクセシビリティ

- セマンティックなHTML要素を使用してください
- 適切なARIA属性を設定してください
- キーボードナビゲーションをサポートしてください
- 色のコントラスト比を確保してください
- スクリーンリーダー対応を考慮してください
